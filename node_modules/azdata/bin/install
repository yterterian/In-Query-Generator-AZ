#!/usr/bin/env node

var semver = require('semver');
var fs = require('fs');
var path = require('path');
var shared = require('../lib/shared');

process.on('uncaughtException', function (err) {
    exitWithError(err);
});

var engine = process.env.npm_package_engines_azdata;
if (!engine) {
    exitWithError('Missing SQL Ops engine declaration in package.json.');
}

var azdataDtsTypescriptPath = path.join(path.dirname(__dirname), 'azdata.d.ts');

console.log('Detected SQL Ops engine version: ' + engine);

getURLMatchingEngine(engine, function (_, data) {
    console.log('Fetching azdata.d.ts from: ' + data.url);

    shared.getContents(data.url, process.env.GITHUB_TOKEN, null, function (error, contents) {
        if (error) {
            exitWithError(error);
        }

        if (contents === 'Not Found') {
            exitWithError(new Error('Could not find azdata.d.ts at the provided URL. Please report this to https://github.com/Microsoft/azuredatastudio/issues'));
        }

        // we don't need massaging in any version of our .d.ts

        fs.writeFileSync(azdataDtsTypescriptPath, contents);

        console.log('azdata.d.ts successfully installed!\n');
    });
});

function getURLMatchingEngine(engine, callback) {
    if (!engine || engine === '*') {
        // master
        return callback(null, {
            url: 'https://raw.githubusercontent.com/Microsoft/azuredatastudio/master/src/sql/azdata.d.ts',
            version: '*'
        });
    }

    shared.getContents('https://azuredatastudio-update.azurewebsites.net/api/releases/stable', null, { "X-API-Version": "2" }, function (error, tagsRaw) {
        if (error) {
            exitWithError(error);
        }

        var tagsAndCommits;
        try {
            tagsAndCommits = JSON.parse(tagsRaw);
        } catch (error) {
            exitWithError(error);
        }

        var mapTagsToCommits = Object.create(null);
        for (var i = 0; i < tagsAndCommits.length; i++) {
            var tagAndCommit = tagsAndCommits[i];
            mapTagsToCommits[tagAndCommit.version] = tagAndCommit.id;
        }

        var tags = Object.keys(mapTagsToCommits);

        var tag = minSatisfying(tags, engine);

        // check if master is on the version specified
        if (!tag) {
            return shared.getContents('https://raw.githubusercontent.com/Microsoft/azuredatastudio/master/package.json', process.env.GITHUB_TOKEN, null, function (error, packageJson) {
                if (error) {
                    exitWithError(error);
                }

                var version = JSON.parse(packageJson).version;
                if (semver.satisfies(version, engine)) {
                    // master
                    return callback(null, {
                        url: 'https://raw.githubusercontent.com/Microsoft/azuredatastudio/master/src/sql/azdata.d.ts',
                        version: version
                    });
                }

                // try just grabbing it from a branch
                return callback(null, {
                    url: 'https://raw.githubusercontent.com/Microsoft/azuredatastudio/' + engine + '/src/sql/azdata.d.ts',
                    version: '*'
                });

                // exitWithError('Could not find satifying Azure Data Studio for version ' + engine + ' in the tags: [' + tags.join(', ') + '] or on master: ' + version);
            });
        }

        console.log('Found minimal version that qualifies engine range: ' + tag);

        return callback(null, {
            url: 'https://raw.githubusercontent.com/Microsoft/azuredatastudio/' + mapTagsToCommits[tag] + '/src/sql/azdata.d.ts',
            version: tag
        });
    });
}

function minSatisfying(versions, range) {
    return versions.filter(function (version) {
        try {
            return semver.satisfies(version, range);
        } catch (error) {
            return false; // version might be invalid so we return as not matching
        }
    }).sort(function (a, b) {
        return semver.compare(a, b);
    })[0] || null;
}

function exitWithError(error) {
    console.error('Error installing azdata.d.ts: ' + error.toString());
    process.exit(1);
}
